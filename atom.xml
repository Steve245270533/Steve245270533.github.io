<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://steve245270533.github.io</id>
    <title>南先生.js</title>
    <updated>2021-03-27T02:26:33.732Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://steve245270533.github.io"/>
    <link rel="self" href="https://steve245270533.github.io/atom.xml"/>
    <subtitle>永远相信美好的事情即将发生！</subtitle>
    <logo>https://steve245270533.github.io/images/avatar.png</logo>
    <icon>https://steve245270533.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 南先生.js</rights>
    <entry>
        <title type="html"><![CDATA[前端性能优化总结]]></title>
        <id>https://steve245270533.github.io/post/qian-duan-xing-neng-you-hua-zong-jie/</id>
        <link href="https://steve245270533.github.io/post/qian-duan-xing-neng-you-hua-zong-jie/">
        </link>
        <updated>2021-03-26T12:43:44.000Z</updated>
        <content type="html"><![CDATA[<p>为什么要做性能优化？性能优化到底有多重要？ 网站的性能优化对于用户的留存率、转化率有很大的影响，所以对于前端开发来说性能优化能力也是重要的考察点。</p>
<p>性能优化的点非常的多，有的小伙伴觉得记起来非常的麻烦，所以这里主要梳理出一条线来帮助记忆。<br>
可以将性能优化分为两个大的分类：</p>
<ul>
<li>加载时优化</li>
<li>运行时优化</li>
</ul>
<h2 id="加载时性能">加载时性能</h2>
<p>顾名思义加载时优化 主要解决的就是让一个网站加载过程更快，比如压缩文件大小、使用CDN加速等方式可以优化加载性能。检查加载性能的指标一般看：白屏时间和首屏时间：</p>
<ul>
<li>白屏时间：指的是从输入网址， 到页面开始显示内容的时间。</li>
<li>首屏时间：指从输入网址， 到首屏页面内容渲染完毕的时间。</li>
</ul>
<h3 id="1-白屏时间计算">1. 白屏时间计算</h3>
<p>将代码脚本放在 <code>&lt;/head&gt;</code> 前面就能获取白屏时间：</p>
<pre><code class="language-JavaScript">&lt;script&gt;
    new Date().getTime() - performance.timing.navigationStart
&lt;/script&gt;
</code></pre>
<h3 id="2-首屏时间计算">2. 首屏时间计算</h3>
<p>在<code>window.onload</code>事件中执行以下代码，可以获取首屏时间：</p>
<pre><code class="language-JavaScript">new Date().getTime() - performance.timing.navigationStart
</code></pre>
<h2 id="运行时性能">运行时性能</h2>
<p>运行时性能是指页面运行时的性能表现，而不是页面加载时的性能。可以通过chrome开发者工具中的 Performance 面板来分析页面的运行时性能。关于chrome开发者工具具体如何操作以及如何查看性能，可以看这篇文章性能优化篇——运行时性能分析</p>
<p>接下来就从加载时性能和运行时性能两个方面来讨论网站优化具体应该怎么做。</p>
<h2 id="加载时性能优化">加载时性能优化</h2>
<p>我们知道浏览器如果输入的是一个网址，首先要<code>交给DNS域名解析 -&gt; 找到对应的IP地址 -&gt; 然后进行TCP连接 -&gt; 浏览器发送HTTP请求 -&gt; 服务器接收请求 -&gt; 服务器处理请求并返回HTTP报文 -&gt; 以及浏览器接收并解析渲染页面。</code>从这一过程中，其实就可以挖出优化点，缩短请求的时间，从而去加快网站的访问速度，提升性能。</p>
<p>这个过程中可以提升性能的优化的点：</p>
<ol>
<li>DNS解析优化，浏览器访问DNS的时间就可以缩短</li>
<li>使用HTTP2</li>
<li>减少HTTP请求数量</li>
<li>减少http请求大小</li>
<li>服务器端渲染</li>
<li>静态资源使用CDN</li>
<li>资源缓存，不重复加载相同的资源<br>
从上面几个优化点出发，有以下几种实现性能优化的方式。</li>
</ol>
<h3 id="1-dns-预解析">1. DNS 预解析</h3>
<p>DNS 作为互联网的基础协议，其解析的速度似乎容易被网站优化人员忽视。现在大多数新浏览器已经针对DNS解析进行了优化，典型的一次DNS解析耗费20-120毫秒，减少DNS解析时间和次数是个很好的优化方式。DNS Prefetching是具有此属性的域名不需要用户点击链接就在后台解析，而域名解析和内容载入是串行的网络操作，所以这个方式能减少用户的等待时间，提升用户体验。</p>
<p>浏览器对网站第一次的域名DNS解析查找流程依次为：<br>
<code>浏览器缓存 -&gt;系统缓存 -&gt;路由器缓存 -&gt;ISP DNS缓存 -&gt;递归搜索</code></p>
<p><strong>DNS预解析的实现：</strong></p>
<p>用meta信息来告知浏览器, 当前页面要做DNS预解析:</p>
<pre><code class="language-HTML">&lt;meta http-equiv=&quot;x-dns-prefetch-control&quot; content=&quot;on&quot; /&gt;
</code></pre>
<p>在页面header中使用link标签来强制对DNS预解析:</p>
<pre><code class="language-HTML">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;http://bdimg.share.baidu.com&quot; /&gt;
</code></pre>
<blockquote>
<p>注意：dns-prefetch需慎用，多页面重复DNS预解析会增加重复DNS查询次数。</p>
</blockquote>
<h3 id="2-使用http2">2. 使用HTTP2</h3>
<p>HTTP2带来了非常大的加载优化，所以在做优化上首先就想到了用HTTP2代替HTTP1。<br>
HTTP2相对于HTTP1有这些优点：<br>
<strong>解析速度快</strong><br>
服务器解析 HTTP1.1 的请求时，必须不断地读入字节，直到遇到分隔符 CRLF 为止。而解析 HTTP2 的请求就不用这么麻烦，因为 HTTP2 是基于帧的协议，每个帧都有表示帧长度的字段。</p>
<p><strong>多路复用</strong><br>
在 HTTP2 上，多个请求可以共用一个 TCP 连接，这称为多路复用。<br>
当然HTTP1.1有一个可选的<code>Pipelining</code>技术，说的意思是当一个HTTP连接在等待接收响应时可以通过这个连接发送其他请求。听起来很棒，其实这里有一个坑，处理响应是按照顺序的，也就是后发的请求有可能被先发的阻塞住，也正因此很多浏览器默认是不开启<code>Pipelining</code>的。</p>
<p>HTTP1 的<code>Pipelining</code>技术会有阻塞的问题，HTTP/2的多路复用可以粗略的理解为非阻塞版的Pipelining。即可以同时通过一个HTTP连接发送多个请求，谁先响应就先处理谁，这样就充分的压榨了TCP这个全双工管道的性能。加载性能会是HTTP1的几倍，需要加载的资源越多越明显。当然多路复用是建立在加载的资源在同一域名下，不同域名神仙也复用不了。</p>
<p><strong>首部压缩</strong><br>
HTTP2 提供了首部压缩功能。（这部分了解一下就行）<br>
HTTP 1.1请求的大小变得越来越大，有时甚至会大于TCP窗口的初始大小，因为它们需要等待带着ACK的响应回来以后才能继续被发送。HTTP/2对消息头采用HPACK（专为http/2头部设计的压缩格式）进行压缩传输，能够节省消息头占用的网络的流量。而HTTP/1.x每次请求，都会携带大量冗余头信息，浪费了很多带宽资源。</p>
<p><strong>服务器推送</strong><br>
服务端可以在发送页面HTML时主动推送其它资源，而不用等到浏览器解析到相应位置，发起请求再响应。</p>
<h3 id="3-减少http请求数量">3. 减少HTTP请求数量</h3>
<p>HTTP请求建立和释放需要时间。<br>
HTTP请求从建立到关闭一共经过以下步骤：</p>
<ol>
<li>客户端连接到Web服务器</li>
<li>发送HTTP请求</li>
<li>服务器接受请求并返回HTTP响应</li>
<li>释放连接TCP链接<br>
这些步骤都是需要花费时间的，在网络情况差的情况下，花费的时间更长。如果页面的资源非常碎片化，每个HTTP请求只带回来几K甚至不到1K的数据（比如各种小图标）那性能是非常浪费的。</li>
</ol>
<h3 id="4-压缩-合并文件">4. 压缩、合并文件</h3>
<ul>
<li>压缩文件 -&gt; 减少HTTP请求大小,可以减少请求时间</li>
<li>文件合并 -&gt; 减少HTTP请求数量。</li>
</ul>
<p>我们可以对html、css、js以及图片资源进行压缩处理，现在可以很方便的使用 webpack 实现文件的压缩：</p>
<ul>
<li>js压缩：UglifyPlugin</li>
<li>CSS压缩：MiniCssExtractPlugin</li>
<li>HTML压缩：HtmlWebpackPlugin</li>
<li>图片压缩：image-webpack-loader</li>
</ul>
<p><strong>提取公共代码</strong><br>
合并文件虽然能减少HTTP请求数量， 但是并不是文件合并越多越好，还可以考虑按需加载方式（后面第6点有讲到）。什么样的文件可以合并呢？可以提取项目中多次使用到的公共代码进行提取，打包成公共模块。</p>
<p>可以使用 webpack4 的 <code>splitChunk</code>插件 <code>cacheGroups</code> 选项。</p>
<pre><code>optimization: {
      runtimeChunk: {
        name: 'manifest' // 将 webpack 的 runtime 代码拆分为一个单独的 chunk。
    },
    splitChunks: {
        cacheGroups: {
            vendor: {
                name: 'chunk-vendors',
                test: /[\\/]node_modules[\\/]/,
                priority: -10,
                chunks: 'initial'
            },
            common: {
                name: 'chunk-common',
                minChunks: 2,
                priority: -20,
                chunks: 'initial',
                reuseExistingChunk: true
            }
        },
    }
},
</code></pre>
<h3 id="5-采用svg图片或者字体图标">5. 采用svg图片或者字体图标</h3>
<p>因为字体图标或者SVG是矢量图，代码编写出来的，放大不会失真，而且渲染速度快。字体图标使用时就跟字体一样，可以设置属性，例如 font-size、color 等等，非常方便，还有一个优点是生成的文件特别小。</p>
<h3 id="6-按需加载代码减少冗余代码">6. 按需加载代码，减少冗余代码</h3>
<p><strong>按需加载</strong></p>
<p>在开发SPA项目时，项目中经常存在十几个甚至更多的路由页面， 如果将这些页面都打包进一个JS文件， 虽然减少了HTTP请求数量， 但是会导致文件比较大，同时加载了大量首页不需要的代码，有些得不偿失，<code>这时候就可以使用按需加载， 将每个路由页面单独打包为一个文件，</code>当然不仅仅是路由可以按需加载。<br>
根据文件内容生成文件名，结合 import 动态引入组件实现按需加载：<br>
通过配置 output 的 filename 属性可以实现这个需求。filename 属性的值选项中有一个 <code>[contenthash]</code>，它将根据文件内容创建出唯一 hash。当文件内容发生变化时，<code>[contenthash]</code> 也会发生变化。</p>
<pre><code>output: {
    filename: '[name].[contenthash].js',
    chunkFilename: '[name].[contenthash].js',
    path: path.resolve(__dirname, '../dist'),
},
</code></pre>
<p><strong>减少冗余代码</strong><br>
一方面避免不必要的转义：<code>babel-loader</code>用 <code>include</code> 或 <code>exclude</code> 来帮我们避免不必要的转译，不转译<code>node_moudules</code>中的js文件,其次在缓存当前转译的js文件，设置<code>loader: 'babel-loader?cacheDirectory=true'</code><br>
其次减少ES6 转为 ES5 的冗余代码：Babel 转化后的代码想要实现和原来代码一样的功能需要借助一些帮助函数，比如：</p>
<pre><code class="language-JavaScript">class Person {}
</code></pre>
<p>会被转换为：</p>
<pre><code class="language-JavaScript">&quot;use strict&quot;;

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError(&quot;Cannot call a class as a function&quot;);
  }
}

var Person = function Person() {
  _classCallCheck(this, Person);
};
</code></pre>
<p>这里 <code>_classCallCheck</code> 就是一个 <code>helper</code> 函数，如果在很多文件里都声明了类，那么就会产生很多个这样的 <code>helper</code> 函数。</p>
<p>这里的 <code>@babel/runtime</code>包就声明了所有需要用到的帮助函数，而 <code>@babel/plugin-transform-runtime</code> 的作用就是将所有需要 <code>helper</code> 函数的文件，从 <code>@babel/runtime</code>包 引进来：</p>
<pre><code class="language-JavaScript">&quot;use strict&quot;;
var _classCallCheck2 = require(&quot;@babel/runtime/helpers/classCallCheck&quot;);
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

function _interopRequireDefault(obj) {
  return obj &amp;&amp; obj.__esModule ? obj : { default: obj };
}

var Person = function Person() {
  (0, _classCallCheck3.default)(this, Person);
};
</code></pre>
<p>这里就没有再编译出<code>helper</code> 函数 <code>classCallCheck</code> 了，而是直接引用了<code>@babel/runtime</code> 中的 <code>helpers/classCallCheck</code>。<br>
<strong>安装</strong><br>
<code>npm i -D @babel/plugin-transform-runtime @babel/runtime</code>使用 在 <code>.babelrc</code> 文件中</p>
<pre><code>&quot;plugins&quot;: [
        &quot;@babel/plugin-transform-runtime&quot;
]
</code></pre>
<h3 id="7-服务器端渲染">7. 服务器端渲染</h3>
<p>客户端渲染: 获取 HTML 文件，根据需要下载 JavaScript 文件，运行文件，生成 DOM，再渲染。</p>
<p>服务端渲染：服务端返回 HTML 文件，客户端只需解析 HTML。</p>
<p>优点：首屏渲染快，SEO 好。缺点：配置麻烦，增加了服务器的计算压力。</p>
<h3 id="8-使用-defer-加载js">8.  使用 Defer 加载JS</h3>
<p>尽量<code>将 CSS 放在文件头部，JavaScript 文件放在底部</code></p>
<p>所有放在 head 标签里的 CSS 和 JS 文件都会堵塞渲染。如果这些 CSS 和 JS 需要加载和解析很久的话，那么页面就空白了。所以 JS 文件要放在底部，等 HTML 解析完了再加载 JS 文件。</p>
<p>那为什么 CSS 文件还要放在头部呢？</p>
<p>因为先加载 HTML 再加载 CSS，会让用户第一时间看到的页面是没有样式的、“丑陋”的，为了避免这种情况发生，就要将 CSS 文件放在头部了。</p>
<p>另外，JS 文件也不是不可以放在头部，只要给 script 标签加上 defer 属性就可以了，异步下载，延迟执行。</p>
<h3 id="9-静态资源使用-cdn">9.  静态资源使用 CDN</h3>
<p>用户与服务器的物理距离对响应时间也有影响。把内容部署在多个地理位置分散的服务器上能让用户更快地载入页面, CDN就是为了解决这一问题，在多个位置部署服务器，让用户离服务器更近，从而缩短请求时间。<br>
<img src="https://steve245270533.github.io/post-images/1616764151009.png" alt="" loading="lazy"></p>
<h3 id="10-图片优化">10.  图片优化</h3>
<p><strong>雪碧图</strong><br>
图片可以合并么？当然。最为常用的图片合并场景就是雪碧图（Sprite）。</p>
<p>在网站上通常会有很多小的图标，不经优化的话，最直接的方式就是将这些小图标保存为一个个独立的图片文件，然后通过 CSS 将对应元素的背景图片设置为对应的图标图片。这么做的一个重要问题在于，页面加载时可能会同时请求非常多的小图标图片，这就会受到浏览器并发 HTTP 请求数的限制。</p>
<p>雪碧图的核心原理在于设置不同的背景偏移量，大致包含两点：</p>
<ul>
<li>不同的图标元素都会将 <code>background-url</code> 设置为合并后的雪碧图的 url；</li>
<li>不同的图标通过设置对应的 <code>background-position</code> 来展示大图中对应的图标部分。你可以用 Photoshop 这类工具自己制作雪碧图。当然比较推荐的还是将雪碧图的生成集成到前端自动化构建工具中，例如在 <code>webpack</code> 中使用 <code>webpack-spritesmith</code>，或者在 <code>gulp</code> 中使用 <code>gulp.spritesmith</code>。它们两者都是基于 <code>spritesmith</code> 这个库。</li>
</ul>
<p><strong>图片懒加载</strong><br>
一般来说，我们访问网站页面时，其实很多图片并不在首屏中，如果我们都加载的话，相当于是加载了用户不一定会看到图片， 这显然是一种浪费。解决的核心思路就是懒加载：实现方式就是先不给图片设置路径，当图片出现在浏览器可视区域时才设置真正的图片路径。</p>
<p>实现上就是先将图片路径设置给<code>data-src</code>,当页面不可见时，图片不会加载：</p>
<pre><code class="language-HTML">&lt;img data-src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9eb06680a16044feb794f40fc3b1ac3d~tplv-k3u1fbpfcp-watermark.image&quot; /&gt;
</code></pre>
<p>通过监听页面滚动，等页面可见时设置图片<code>src</code>:</p>
<pre><code class="language-JavaScript">const img = document.querySelector('img')
img.src = img.getAttribute(&quot;data-src&quot;)
</code></pre>
<p>如果想使用懒加载，还可以借助一些已有的工具库，例如 aFarkas/lazysizes、verlok/lazyload、tuupola/lazyload 等。<br>
<strong>css中图片懒加载</strong><br>
除了对于 <code>&lt;img&gt;</code>元素的图片进行来加载，在 CSS 中使用的图片一样可以懒加载，最常见的场景就是 <code>background-url</code>。</p>
<pre><code class="language-CSS">.login {
    background-url: url(/static/img/login.png);
}
</code></pre>
<p>对于上面这个样式规则，如果不应用到具体的元素，浏览器不会去下载该图片。所以你可以通过切换 className 的方式，放心得进行 CSS 中图片的懒加载。</p>
<h2 id="运行时性能优化">运行时性能优化</h2>
<h3 id="1-减少重绘与重排">1.  减少重绘与重排</h3>
<p>有前端经验的开发者对这个概念一定不会陌生，浏览器下载完页面需要的所有资源后， 就开始渲染页面，主要经历这5个过程：</p>
<ol>
<li>解析HTML生成DOM树</li>
<li>解析CSS生成CSSOM规则树</li>
<li>将DOM树与CSSOM规则树合并生成Render(渲染)树</li>
<li>遍历Render(渲染)树开始布局， 计算每一个节点的位置大小信息</li>
<li>将渲染树每个节点绘制到屏幕上<br>
浏览器渲染过程:<br>
<img src="https://steve245270533.github.io/post-images/1616764881224.png" alt="" loading="lazy"><br>
<strong>重排</strong></li>
</ol>
<p>当改变DOM元素位置或者大小时， 会导致浏览器重新生成Render树， 这个过程叫重排</p>
<p><strong>重绘</strong></p>
<p>当重新生成渲染树后， 将要将渲染树每个节点绘制到屏幕， 这个过程叫重绘。</p>
<p><strong>重排触发时机</strong></p>
<p>重排发生后的根本原理就是元素的几何属性发生改变， 所以从能够改变几何属性的角度入手：</p>
<ul>
<li>添加|删除可见的DOM元素</li>
<li>元素位置发生改变</li>
<li>元素本省的尺寸发生改变</li>
<li>内容变化</li>
<li>页面渲染器初始化</li>
<li>浏览器窗口大小发生改变</li>
</ul>
<blockquote>
<p>二者关系：重排会导致重绘， 但是重绘不会导致重排</p>
</blockquote>
<p>了解了重排和重绘这两个概念，我们还要知道重排和重绘的开销都是非常昂贵的，如果不停的改变页面的布局，就会造成浏览器消耗大量的开销在进行页面的计算上，这样容易造成页面卡顿。那么回到我们的问题<code>如何减少重绘与重排呢？</code></p>
<h4 id="1-避免table布局">1.  避免table布局</h4>
<ul>
<li>不要使用table布局，可能很小的一个改动会造成整个table重新布局</li>
</ul>
<h4 id="2-分离读写操作">2. 分离读写操作</h4>
<p>DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。</p>
<pre><code class="language-JavaScript">// bad 强制刷新 触发四次重排+重绘
div.style.left = div.offsetLeft + 1 + 'px';
div.style.top = div.offsetTop + 1 + 'px';
div.style.right = div.offsetRight + 1 + 'px';
div.style.bottom = div.offsetBottom + 1 + 'px';


// good 缓存布局信息 相当于读写分离 触发一次重排+重绘
var curLeft = div.offsetLeft;
var curTop = div.offsetTop;
var curRight = div.offsetRight;
var curBottom = div.offsetBottom;

div.style.left = curLeft + 1 + 'px';
div.style.top = curTop + 1 + 'px';
div.style.right = curRight + 1 + 'px';
div.style.bottom = curBottom + 1 + 'px';
</code></pre>
<h4 id="3-样式集中改变">3. 样式集中改变</h4>
<p>不要频发的操作样式，虽然现在大部分浏览器有渲染队列优化，但是在一些老版本的浏览器仍然存在效率低下的问题：</p>
<pre><code class="language-JavaScript">// 三次重排
div.style.left = '10px';
div.style.top = '10px';
div.style.width = '20px';

// 一次重排
el.style.cssText = 'left: 10px;top: 10px; width: 20px';
</code></pre>
<p>或者可以采用更改类名而不是修改样式的方式。</p>
<h4 id="4-position属性为absolute或fixed">4. position属性为absolute或fixed</h4>
<p>使用绝对定位会使的该元素单独成为渲染树中 body 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。</p>
<h3 id="2-避免页面卡顿">2. 避免页面卡顿</h3>
<p>我们目前大多数屏幕的刷新率-60次/s,浏览器渲染更新页面的标准帧率也为60次/s --60FPS(<code>frames/pre second</code>), 那么每一帧的预算时间约为<code>16.6ms ≈ 1s/60</code>，浏览器在这个时间内要完成所有的<code>整理工作</code>，如果无法符合此预算， 帧率将下降，内容会在屏幕抖动， 此现象通常称为<strong>卡顿</strong>。<br>
浏览器需要做的工作包含下面这个流程：<br>
<img src="https://steve245270533.github.io/post-images/1616765191866.webp" alt="" loading="lazy"><br>
首先你用js做了些逻辑，还触发了样式变化，<code>style</code>把应用的样式规则计算好之后，把影响到的页面元素进行重新布局，叫做<code>layout</code>，再把它画到内存的一个画布里面，<code>paint</code>成了像素，最后把这个画布刷到屏幕上去，叫做<code>composite</code>，形成一帧。</p>
<p>这几项的任何一项如果执行时间太长了，就会导致渲染这一帧的时间太长，平均帧率就会掉。假设这一帧花了50ms，那么此时的帧率就为1s / 50ms = 20fps.<br>
当然上面的过程并不一定每一步都会执行，例如：</p>
<ul>
<li>你的js只是做一些运算，并没有增删DOM或改变CSS，那么后续几步就不会执行<br>
-<code>style</code>只改了颜色等不需要重新layout的属性就不用执行<code>layout</code>这一步</li>
<li><code>style</code>改了transform属性，在blink和edge浏览器里面不需要layout和paint</li>
</ul>
<h3 id="3-长列表优化">3. 长列表优化</h3>
<p>有时会有这样的需求， 需要在页面上展示包含上百个元素的列表（例如一个Feed流）。每个列表元素还有着复杂的内部结构，这显然提高了页面渲染的成本。当你使用了React时，长列表的问题就会被进一步的放大。那么怎么来优化长列表呢？</p>
<h4 id="1-实现虚拟列表">1.  实现虚拟列表</h4>
<p>虚拟列表是一种用来优化长列表的技术。它可以保证在列表元素不断增加，或者列表元素很多的情况下，依然拥有很好的滚动、浏览性能。它的核心思想在于：只渲染可见区域附近的列表元素。下图左边就是虚拟列表的效果，可以看到只有视口内和临近视口的上下区域内的元素会被渲染。<br>
<img src="https://steve245270533.github.io/post-images/1616765349910.png" alt="" loading="lazy"><br>
具体实现步骤如下所示：</p>
<ul>
<li>首先确定长列表所在父元素的大小，父元素的大小决定了可视区的宽和高</li>
<li>确定长列表每一个列表元素的宽和高，同时初始的条件下计算好长列表每一个元素相对于父元素的位置，并用一个数组来保存所有列表元素的位置信息</li>
<li>首次渲染时，只展示相对于父元素可视区内的子列表元素，在滚动时，根据父元素的滚动的<code>offset</code>重新计算应该在可视区内的子列表元素。这样保证了无论如何滚动，真实渲染出的dom节点只有可视区内的列表元素。</li>
<li>假设可视区内能展示5个子列表元素，及时长列表总共有1000个元素，但是每时每刻，真实渲染出来的dom节点只有5个。</li>
<li>补充说明，这种情况下，父元素一般使用<code>position：relative</code>，子元素的定位一般使用：<code>position：absolute</code>或<code>sticky</code></li>
</ul>
<p>除了自己实现外， 常用的框架也有不错的开源实现， 例如：</p>
<ul>
<li>基于React的 react-virtualized</li>
<li>基于Vue 的 vue-virtual-scroll-list</li>
<li>基于Angular的 ngx-virtual-scroller</li>
</ul>
<h3 id="4-滚动事件性能优化">4.  滚动事件性能优化</h3>
<p>前端最容易碰到的性能问题的场景之一就是监听滚动事件并进行相应的操作。由于滚动事件发生非常频繁，所以频繁地执行监听回调就容易造成JavaScript执行与页面渲染之间互相阻塞的情况。</p>
<p>对应滚动这个场景，可以采用<code>防抖</code>和<code>节流</code>来处理。</p>
<p>当一个事件频繁触发，而我们希望间隔一定的时间再触发相应的函数时， 就可以使用节流（throttle）来处理。比如判断页面是否滚动到底部，然后展示相应的内容；就可以使用节流，在滚动时每300ms进行一次计算判断是否滚动到底部的逻辑，而不用无时无刻地计算。</p>
<p>当一个事件频繁触发，而我们希望在事件触发结束一段时间后（此段时间内不再有触发）才实际触发响应函数时会使用防抖（debounce）。例如用户一直点击按钮，但你不希望频繁发送请求，你就可以设置当点击后 200ms 内用户不再点击时才发送请求。<br>
对节流和防抖不太了解的可以看这篇文章：<a href="https://mp.weixin.qq.com/s/HVkV7F1U77GvXbEI9MWA6g">老生常谈的防抖与节流</a></p>
<h3 id="5-使用-web-workers">5. 使用 Web Workers</h3>
<p>前面提到了大量数据的渲染环节我们可以采用虚拟列表的方式实现,但是大量数据的计算环节依然会产生浏览器假死或者卡顿的情况.</p>
<p>通常情况下我们CPU密集型的任务都是交给后端计算的,但是有些时候我们需要处理一些离线场景或者解放后端压力,这个时候此方法就不奏效了.</p>
<p>还有一种方法是计算切片,使用 setTimeout 拆分密集型任务,但是有些计算无法利用此方法拆解,同时还可能产生副作用,这个方法需要视具体场景而动.</p>
<p>最后一种方法也是目前比较奏效的方法就是利用Web Worker 进行多线程编程.</p>
<p>Web Worker 是一个独立的线程（独立的执行环境），这就意味着它可以完全和 UI 线程（主线程）并行的执行 js 代码，从而不会阻塞 UI，它和主线程是通过 onmessage 和 postMessage 接口进行通信的。</p>
<p>Web Worker 使得网页中进行多线程编程成为可能。当主线程在处理界面事件时，worker 可以在后台运行，帮你处理大量的数据计算，当计算完成，将计算结果返回给主线程，由主线程更新 DOM 元素。</p>
<h3 id="6-写代码时的优化点">6. 写代码时的优化点</h3>
<p>提升性能，有时候在我们写代码时注意一些细节也是有效果的。</p>
<h4 id="1使用事件委托">1.使用事件委托</h4>
<pre><code class="language-HTML">&lt;ul&gt;
  &lt;li&gt;字节跳动&lt;/li&gt;
  &lt;li&gt;阿里&lt;/li&gt;
  &lt;li&gt;腾讯&lt;/li&gt;
  &lt;li&gt;京东&lt;/li&gt;
&lt;/ul&gt;

// good
document.querySelector('ul').onclick = (event) =&gt; {
  const target = event.target
  if (target.nodeName === 'LI') {
    console.log(target.innerHTML)
  }
}

// bad
document.querySelectorAll('li').forEach((e) =&gt; {
  e.onclick = function() {
    console.log(this.innerHTML)
  }
}) 
</code></pre>
<p>绑定的事件越多， 浏览器内存占有就越多，从而影响性能，利用事件代理的方式就可节省一些内存。</p>
<h4 id="2-if-else-对比-switch">2. if-else 对比 switch</h4>
<p>当判定条件越来越多时， 越倾向于使用switch,而不是if-else:</p>
<pre><code class="language-JavaScript">if (state ==0) {
    console.log(&quot;待开通&quot;)
} else if (state == 1) {
    console.log(&quot;学习中&quot;)
} else if (state == 2) {
    console.log(&quot;休学中&quot;)
} else if (state == 3) {
    console.log(&quot;已过期&quot;)
} esle if (state ==4){
    console.log(&quot;未购买&quot;)
}

switch (state) {
    case 0:

        break
    case 1:

        break
    case 2:

        break
    case 3:

        break
    case 4:

        break
}
</code></pre>
<p>向上面这种情况使用<code>switch</code>更好， 假设<code>state</code>为4，那么<code>if-else</code>语句就要进行4次判定，<code>switch</code>只要进行一次即可。<br>
但是有的情况下<code>switch</code>也做不到<code>if-else</code>的事情, 例如有多个判断条件的情况下，无法使用<code>switch</code></p>
<h4 id="3-布局上使用flexbox">3. 布局上使用flexbox</h4>
<p>在早期的 CSS 布局方式中我们能对元素实行绝对定位、相对定位或浮动定位。而现在，我们有了新的布局方式 flexbox，它比起早期的布局方式来说有个优势，那就是性能比较好。</p>
<p>关于前端性能优化就写到这里了，相信还有很多在代码细节上注意就能进行性能优化的点</p>
<p><strong>参考文章：</strong></p>
<p>https://juejin.cn/post/6844903506906710024#comment</p>
<p>https://learnku.com/docs/f2e-performance-rules/reduce-the-number-of-http-requests/6369</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[浅谈CSS3边框圆角]]></title>
        <id>https://steve245270533.github.io/post/qian-tan-css3-bian-kuang-yuan-jiao/</id>
        <link href="https://steve245270533.github.io/post/qian-tan-css3-bian-kuang-yuan-jiao/">
        </link>
        <updated>2021-03-10T14:03:18.000Z</updated>
        <content type="html"><![CDATA[<p>现在我们大多数网页界面涉及的元素非常丰富，在CSS3.0还没提出之前可能绝大部分网页的一些显示效果需要用图片做效果，甚至动效还会用到flash。所以请求服务器次数就要明显高于CSS3.0，所以性能和访问就要明显差点。</p>
<hr>
<p>在这里先给大家欣赏一下十年前的BAT网页...<br>
<img src="https://steve245270533.github.io/post-images/1616811920269.webp" alt="" loading="lazy"><br>
<img src="https://steve245270533.github.io/post-images/1616811927258.webp" alt="" loading="lazy"><br>
如果现在看到这样的网页估计你们会马上关掉（贪玩蓝月既视感，不想和成龙大哥一起攻沙😂 ），当然这只是开个玩笑<br>
<br><br>
再看看现在的网页...<br>
<img src="https://steve245270533.github.io/post-images/1616811933864.webp" alt="" loading="lazy"><br>
<img src="https://steve245270533.github.io/post-images/1616811938665.webp" alt="" loading="lazy"><br>
惊呆了有木有！😲😲😲<br>
这都得益于CSS3强大的特性，不过在这里我不打算继续往大的吹下去了，今天主要谈谈CSS3中的边框圆角<code>border-radius</code><br>
##1.基本作用及含义<br>
它可以给元素添加圆角的边框，下面就是它的基本用法，我就直接上代码配合图片演示</p>
<pre><code class="language-html">&lt;style&gt;
	div{
			width: 100px;
			height: 100px;
			border: 1px solid #000;
          /*border-radius:左上 右上 右下 左下;*/
			border-radius:10px 20px 30px 40px;
		}
&lt;/style&gt;
&lt;body&gt;
		&lt;div&gt;&lt;/div&gt;
&lt;/body&gt;
</code></pre>
<p><img src="https://steve245270533.github.io/post-images/1616811944363.webp" alt="" loading="lazy"><br>
或许看到这里大家对于边框圆角的绘制有一个大概的了解了，通常情况下我们都是这样写的：<code>border-radius:10px;</code>只写一个值其意思就是在盒子的左上 右上 右下 左下区域都是10px的圆角；但如果只写两个或者三个值又该怎么表示呢？例<code>border-radius:20px 0px 10px;</code>其实当省略了某一个角之后,系统会自动参考对角的值<img src="https://steve245270533.github.io/post-images/1616811960257.webp" alt="" loading="lazy"><br>
这个例子中就是只设置了左上 右上 右下的值，缺省了左下的值，所以左下的值就会自动参考它对角的值</p>
<p>如果只是单一设置某一个角的圆角例如<code>border-top-left-radius: 10px 20px;</code>第一个值就是设置在元素水平方向的参考点，第二个值就是设置在元素垂直方向的参考点，具体什么意思呢？上图：<br>
<img src="https://steve245270533.github.io/post-images/1616811966195.webp" alt="" loading="lazy"><br>
通常的用法是<code>border-top-left-radius: 10px;</code>也就是x的点和y的点都是统一的。<br>
##2.实际运用<br>
平常我们大多数是用在扁平化的设计当中，例如文本框、按钮之类的，但是也可以用在其他地方，大家可以自己试试：</p>
<h3 id="圆形">圆形</h3>
<p>根据指定的值作为圆心,按照指定的值作为半径绘制圆弧， 一般都是设置为元素的一半也就是元素的中心点（但前提是元素的宽高一致）<code>border-radius: 50%;</code></p>
<h3 id="半圆">半圆</h3>
<ol>
<li>先将元素的border-radius:左上和右上设置为宽度高度的一半;</li>
<li>再将元素高度缩减一半<br>
width: 200px;<br>
height: 100px;<br>
border: 1px solid #000;<br>
margin: 100px auto;<br>
box-sizing: border-box;<br>
border-radius: 100px 100px 0 0;</li>
</ol>
<h3 id="椭圆">椭圆</h3>
<p>设置水平方向为宽度的一半<br>
设置垂直方向为高度的一半<br>
width: 400px;<br>
height: 200px;<br>
border: 1px solid #000;<br>
margin: 100px auto;<br>
box-sizing: border-box;<br>
border-top-left-radius: 200px 100px;<br>
border-top-right-radius: 200px 100px;<br>
border-bottom-left-radius: 200px 100px;<br>
border-bottom-right-radius: 200px 100px;</p>
<p>注意点：<br>
当边框圆角的值 &lt;= 边框宽度的时候,外边框是圆角，内边框是直角 例如：border-radius:50px;<br>
<img src="https://steve245270533.github.io/post-images/1616811973733.webp" alt="" loading="lazy"><br>
当边框圆角的值 &gt; 边框宽度的时候,外边框和内边框都会变成圆角 例如：border-radius:70px;<br>
<img src="https://steve245270533.github.io/post-images/1616811977511.webp" alt="" loading="lazy"></p>
<h2 id="跳动爱心">跳动爱心</h2>
<p>这只是我的思路，当然也会有很多种办法可以实现<br>
<img src="https://steve245270533.github.io/post-images/1616811981826.webp" alt="" loading="lazy"></p>
<h2 id="css3动效鸟">CSS3动效鸟</h2>
<p><img src="https://steve245270533.github.io/post-images/1616811988982.webp" alt="" loading="lazy"><br>
是不是狂拽酷炫吊炸天呢😄</p>
<p>喜欢的话就关注码起来吧！<br>
（ps：以上仅作为个人的认知，如有错误的地方欢迎大家指正）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构入门]]></title>
        <id>https://steve245270533.github.io/post/test/</id>
        <link href="https://steve245270533.github.io/post/test/">
        </link>
        <updated>2021-03-02T12:08:11.000Z</updated>
        <content type="html"><![CDATA[<p>知识结构思维导图<br>
<img src="https://steve245270533.github.io/post-images/1614688377578.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编写网页的步骤]]></title>
        <id>https://steve245270533.github.io/post/bian-xie-wang-ye-de-bu-zou/</id>
        <link href="https://steve245270533.github.io/post/bian-xie-wang-ye-de-bu-zou/">
        </link>
        <updated>2021-01-20T12:22:48.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-新建站点文件夹">1. 新建站点文件夹</h2>
<ol>
<li>文件夹名称不能是中文</li>
<li>里面至少应该包含css/js/images三个子文件夹</li>
<li>里面至少应该包含index.html文件</li>
</ol>
<h2 id="2-设置favorites-icon网页图标">2. 设置favorites icon网页图标</h2>
<p>显示在网页选项卡和收藏夹中的图标，我们称之为favicon</p>
<ol>
<li>生成网页图标</li>
</ol>
<ul>
<li>搜索ico图标生成——上传图标——下载生成好的图标（推荐网站：比特虫）</li>
</ul>
<ol start="2">
<li>放到站点目录根目录下</li>
<li>在head标签中间添加</li>
</ol>
<pre><code>&lt;link rel=&quot;shortcut icon&quot; href=&quot;favicon.ico&quot; type=&quot;image/x-icon&quot; /&gt;
</code></pre>
<h2 id="3-添加网站优化的三大标签">3. 添加网站优化的三大标签</h2>
<ol>
<li>网页title标题</li>
</ol>
<ul>
<li>title是网页第一重要的标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。</li>
<li>标题长度：Google(35个中文) 百度(28个中文)</li>
<li>格式：网站名(产品名)-网站的介绍</li>
</ul>
<pre><code>例如：
&lt;title&gt;淘宝 — 淘！我喜欢&lt;/title&gt;
&lt;title&gt;京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！&lt;/title&gt;
&lt;title&gt;苏宁易购(Suning.com)-送货更准时、价格更超值、上新货更快&lt;/title&gt;
//特点：越先出现的词语，权重越高
</code></pre>
<ol start="2">
<li>Keywords 关键字</li>
</ol>
<ul>
<li>Keywords是页面关键字，是搜索引擎重点关注点之一。</li>
<li>Keywords应该限制在6-8个关键字左右（其实也可以多个），电商类网站可以多几个。</li>
</ul>
<pre><code>例如
&lt;meta name=&quot;keywords&quot; content=&quot;苏宁易购网上商城,苏宁电器,Suning,手机,电脑,冰箱,洗衣机,相机,数码,家居用品,鞋帽,化妆品,母婴用品,图书,食品,正品行货&quot;/&gt;
</code></pre>
<ol start="3">
<li>Description网站说明</li>
</ol>
<ul>
<li>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的meta标签中描述部分作为搜索结果的<code>“内容摘要”</code>。就是简要说明我们网站是主要做什么的。</li>
<li>补充在title和keywords中未能充分表述的说明。</li>
<li>字符数含空格在内不要超过120个汉字。</li>
<li>描述中出现关键字，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣，吸引用户点击</li>
</ul>
<pre><code>例如：
京东：&lt;meta name=&quot;description&quot; content=&quot;京东JD.COM-专业的综合网上购物商城，为您提供正品低价的购物选择、优质便捷的服务体验。商品来自全球数十万品牌商家，囊括家电、手机、电脑、服装、居家、母婴、美妆、个护、食品、生鲜等丰富品类，满足各种购物需求。&quot;&gt;
苏宁：&lt;meta name=&quot;description&quot; content=&quot;苏宁易购-综合网上购物平台，商品涵盖家电、手机、电脑、超市、母婴、服装、百货、海外购等品类。送货更准时、价格更超值、上新货更快，正品行货、全国联保、可门店自提，全网更低价，让您放心去喜欢！&quot; /&gt;
</code></pre>
<h2 id="4-导入css-reset-类库">4. 导入CSS Reset 类库</h2>
<ul>
<li>将所有的浏览器的自带样式重置掉，保持各浏览器渲染的一致性</li>
</ul>
<blockquote>
<p>推荐<br>
1.reset.css<br>
无论是否有用，一律清零<br>
2.normalize.css<br>
保护有用的浏览器默认样式而不是完全去掉它们<br>
一般化的样式：为大部分HTML元素提供<br>
修复浏览器自身的BUG并保证各浏览器的一致性<br>
优化css可用性：用一些小技巧</p>
</blockquote>
<h2 id="5-设置全局通用字体行高">5. 设置全局通用字体行高</h2>
<pre><code>body{
		font: 12px/1.5em &quot;Microsoft Yahei&quot;,tahoma,arial,&quot;Hiragino Sans GB&quot;;
		color: #999;
		background: #f2f2f2;
	}
</code></pre>
<h2 id="6-值得思考的问题优雅降级和渐进增强">6. 值得思考的问题，<code>优雅降级</code>和<code>渐进增强</code></h2>
<ul>
<li>渐进增强</li>
</ul>
<blockquote>
<p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验</p>
</blockquote>
<ul>
<li>优雅降级</li>
</ul>
<blockquote>
<p>一开始就在高级浏览器上构建完整的功能，然后再针对低版本的浏览器进行兼容</p>
</blockquote>
<ul>
<li>建议</li>
</ul>
<blockquote>
<p>现在微软抛弃ie浏览器转而支持edge了，所以我们很多情况下没有必要再时时刻刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况修补低版本浏览器的问题修补时现在最常见的做法就是为低版本浏览器单独制作一个跳转页面(可以下载ietester试试)<br>
例如<br>
www.zhihu.com<br>
www.jd.com<br>
www.taobao.com</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[程序员行走江湖必备技能🔧]]></title>
        <id>https://steve245270533.github.io/post/bu-chong-cheng-xu-yuan-bi-bei-ji-neng/</id>
        <link href="https://steve245270533.github.io/post/bu-chong-cheng-xu-yuan-bi-bei-ji-neng/">
        </link>
        <updated>2020-05-13T02:54:12.000Z</updated>
        <content type="html"><![CDATA[<h2 id="icon图标的使用">icon图标的使用</h2>
<p>推荐网站：<a href="https://www.iconfont.cn/">iconfont阿里巴巴矢量图标库</a></p>
<h2 id="markdown语法使用">MarkDown语法使用</h2>
<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>
<strong>优点：</strong></p>
<ol>
<li>因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作，对比Word文档更加轻便简洁，不用去考虑字体以及排版问题，通过MarkDown语法编写的文本渲染后会产生一个良好的展示效果。</li>
<li>操作简单。比如:Word编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</li>
</ol>
<p><strong>缺点：</strong></p>
<ol>
<li>需要记一些语法（当然，是很简单。五分钟学会）。</li>
<li>有些平台不支持Markdown编辑模式。</li>
</ol>
<p><a href="https://www.runoob.com/markdown/md-tutorial.html">MarkDown语法教程</a><br>
<a href="https://www.typora.io/">史上最强MarkDown编辑器——Typora</a></p>
<h2 id="如何当好一个切图仔">如何当好一个切图仔？</h2>
<ol>
<li>在PS中如何切图？</li>
<li>自动化标注工具<a href="https://www.fancynode.com.cn/pxcook">PxCook像素大厨</a></li>
</ol>
]]></content>
    </entry>
</feed>